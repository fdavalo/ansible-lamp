apiVersion: v1
data:
  service-8080.yaml: |
    kind: Service
    apiVersion: v1
    metadata:
      name: ${APP_NAME}
    spec:
      ports:
        - protocol: TCP
          port: 8080
          targetPort: 8080
      selector:
        service-selector: ${APP_NAME}
      type: ClusterIP
      sessionAffinity: None
  pipelinerun.yaml: |
    apiVersion: tekton.dev/v1beta1
    kind: PipelineRun
    metadata:
      name: create-poc-setup-${APP_NAME}
      labels:
        tekton.dev/pipeline: create-poc-setup
    spec:
      params:
        - name: vm-prefix
          value: ${APP_NAME}
      pipelineRef:
        name: create-poc-setup
      serviceAccountName: pipeline
      timeout: 1h0m0s
  vm-config.yaml: |
    apiVersion: kubevirt.io/v1alpha3
    kind: VirtualMachine
    metadata:
      annotations:
        name.os.template.kubevirt.io/rhel8.4: Red Hat Enterprise Linux 8.0 or higher
        vm.kubevirt.io/flavor: small
        vm.kubevirt.io/os: rhel8
        vm.kubevirt.io/workload: server
      name: ${VM_NAME} 
      labels:
        app: ${VM_NAME} 
        flavor.template.kubevirt.io/small: "true"
        os.template.kubevirt.io/rhel8.4: "true"
        vm.kubevirt.io/template: rhel8-server-small
        vm.kubevirt.io/template.namespace: openshift
        vm.kubevirt.io/template.revision: "1"
        vm.kubevirt.io/template.version: v0.15.1
        workload.template.kubevirt.io/server: "true"
    spec:
      dataVolumeTemplates:
      - metadata:
          creationTimestamp: null
          name: ${VM_NAME}-disk 
        spec:
          pvc:
            accessModes:
            - ReadWriteMany
            resources:
              requests:
                storage: 20Gi
            storageClassName: {{ .Values.vm.storageclass }}
            volumeMode: Block
          source:
            pvc:
              name: {{ .Values.vm.source.pvc }} 
              namespace: {{ .Values.vm.source.namespace }} 
      running: true 
      template:
        metadata:
          labels:
            service-selector: ${APP_NAME}
            flavor.template.kubevirt.io/small: "true"
            kubevirt.io/domain: ${VM_NAME} 
            kubevirt.io/size: small
            os.template.kubevirt.io/rhel8.4: "true"
            vm.kubevirt.io/name: ${VM_NAME} 
            workload.template.kubevirt.io/server: "true"
        spec:
          domain:
            cpu:
              cores: 1
              sockets: 1
              threads: 1
            devices:
              disks:
              - disk:
                  bus: virtio
                name: cloudinitdisk
              - bootOrder: 1
                disk:
                  bus: virtio
                name: rootdisk
              interfaces:
              - masquerade: {}
                model: virtio
                name: default
              networkInterfaceMultiqueue: true
              rng: {}
            machine:
              type: pc-q35-rhel8.4.0
            resources:
              requests:
                memory: 2Gi
          evictionStrategy: LiveMigrate
          hostname: ${VM_NAME} 
          networks:
          - name: default
            pod: {}
          terminationGracePeriodSeconds: 10
          volumes:
          - cloudInitNoCloud:
              userData: |
                #cloud-config
                user: cloud-user
                password: rhpoc
                chpasswd:
                  expire: false
                ssh_pwauth: True
                #ssh_authorized_keys:
                #  - {{ .Values.vm.sshpublickeyaccess }}
            name: cloudinitdisk
          - dataVolume:
              name: ${VM_NAME}-disk
            name: rootdisk
kind: ConfigMap
metadata:
  name: pipeline-templates
